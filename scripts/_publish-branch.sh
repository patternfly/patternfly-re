#!/bin/sh

default()
{
  SCRIPT=`basename $0`
  SCRIPT_DIR=`dirname $0`
  SCRIPT_DIR=`cd $SCRIPT_DIR; pwd`

  . $SCRIPT_DIR/_env.sh
  . $SCRIPT_DIR/_common.sh

  BRANCH=$RELEASE_BRANCH
  BRANCH_DIST=$RELEASE_DIST_BRANCH
  BUILD_DIR=$TRAVIS_BUILD_DIR
}

# Push generated files to dist branch for tagging release.
#
# $1: Remote branch
# $2: Local branch
push_dist()
{
  echo "*** Pushing to dist branch: $1"
  cd $BUILD_DIR

  git checkout $TRAVIS_BRANCH-local

  # Commit generated files
  git add dist --force
  if [ -d "dist-demo" ]; then
    git add dist-demo --force
  fi
  git commit -m "Added files generated by Travis build"
  check $? "git commit failure"

  # Push to dist branch
  EXISTING=`git ls-remote --heads https://github.com/$TRAVIS_REPO_SLUG.git $1`

  if [ -n "$EXISTING" ]; then
    git fetch upstream $1:$2 # <remote-branch>:<local-branch>
    git checkout $2
    git merge -Xtheirs $TRAVIS_BRANCH-local --no-edit --ff
    check $? "git merge failure"

    git push upstream $2 -v
  else
    git push upstream $TRAVIS_BRANCH-local:$2 -v # <local-branch>:<remote-branch>
  fi
  check $? "git push failure"
}

# Push shrinkwrap to master branch
#
# $1: Remote branch
# $2: Local branch
push_master()
{
  echo "*** Pushing to master branch: $1"
  cd $BUILD_DIR

  if [ -s $SHRINKWRAP_JSON ]; then
    git add $SHRINKWRAP_JSON --force
  else
    return
  fi

  # Merge master branch
  git fetch upstream $1:$2 # <remote-branch>:<local-branch>
  git checkout $2
  git merge -Xtheirs $TRAVIS_BRANCH-local --no-edit --ff
  check $? "git merge failure"

  # Push to master
  git push upstream $2:$1 -v # <local-branch>:<remote-branch>
  check $? "git push failure"
}

# Check prerequisites before continuing
#
prereqs()
{
  # Avoid creating a dist equivalent for all branches added to the main repository
  if [ -z "$REPO_FORK" ]; then
    if [ ! "$TRAVIS_BRANCH" = "$RELEASE_BRANCH" -o "$TRAVIS_BRANCH" = "$NEXT_BRANCH" ]; then
      echo "This commit was made against $TRAVIS_BRANCH and not the master or tag! Do not deploy!"
      exit 0
    fi
  fi

  # Ensure dist branch is not redeployed.
  case "$TRAVIS_BRANCH" in
    *-dist ) echo "This commit was made against the dist branch. Do not deploy!"; exit 0;;
  esac
}

usage()
{
cat <<- EEOOFF

    This script will publish generated files to GitHub.

    Note: Intended for use with Travis only.

    AUTH_TOKEN must be set via Travis CI.

    sh [-x] $SCRIPT [-h]

    Example: sh $SCRIPT

    OPTIONS:
    h       Display this message (default)

EEOOFF
}

# main()
{
  default

  while getopts haopr c; do
    case $c in
      h) usage; exit 0;;
      \?) usage; exit 1;;
    esac
  done

  prereqs
  git_setup
  push_master $BRANCH $BRANCH
  push_dist $BRANCH_DIST $BRANCH_DIST
}
